import numpy as np
import random
import string
'''
Шаг 1: Инициализация ключа
Сгенерируется случайный ключ, который будет использоваться для шифрования и расшифрования данных. Ключ может быть длиной 128, 192 или 256 бит.

Шаг 2: Добавление заполнения (Padding)
Если необходимо, данные будут дополнены до длины, кратной блоку шифрования (обычно 128 бит), чтобы обеспечить целостность и возможность корректного шифрования.

Шаг 3: Начало работы с ключом
Исходные данные разбиваются на блоки длиной 128 бит. Каждый блок подвергается операции XOR с ключом.

Шаг 4: Применение преобразований подстановки и перестановки (Substitution-Permutation Network)
Каждый блок данных проходит через несколько раундов, включающих в себя преобразования подстановки (замены) и перестановки (перемены местами битов). Процесс повторяется заданное количество раундов в зависимости от длины ключа (10 раундов для 128-битного ключа, 12 для 192-битного и 14 для 256-битного).

Шаг 5: Финализация
После завершения всех раундов, заключительный блок данных подвергается дополнительным преобразованиям.

Шаг 6: Конец шифрования
Шифрованные данные готовы к передаче или сохранению.

Расшифровка происходит в обратном порядке, при этом используется тот же ключ, которым были зашифрованы исходные данные.'''
class MyPadding:
    @staticmethod
    def pad(data, block_size):
        padding_length = block_size - len(data) % block_size
        padding = bytes([padding_length]) * padding_length
        return data + padding

    @staticmethod
    def unpad(data):
        padding_length = data[-1]
        return data[:-padding_length]

class AES:
    def __init__(self):
        self.round_keys = None

    def key_expansion(self, key):
        # Расширение ключа для раундов AES
        w = np.zeros((44, 4), dtype=np.uint8)
        for i in range(4):
            w[i] = [key[4 * i], key[4 * i + 1], key[4 * i + 2], key[4 * i + 3]]

        for i in range(4, 44):
            temp = w[i - 1].tolist()
            if i % 4 == 0:
                temp = [temp[1], temp[2], temp[3], temp[0]]
                temp = [self.s_box[b] for b in temp]
                temp[0] ^= self.rcon[i // 4 - 1]
            w[i] = np.bitwise_xor(w[i - 4], temp)

        return w

    def encrypt_block(self, block, key):
        # Шифрование блока AES
        state = np.frombuffer(block, dtype=np.uint8).reshape((4, 4))
        state = self.add_round_key(state, self.round_keys[:4])

        for round in range(1, 10):
            state = self.sub_bytes(state)
            state = self.shift_rows(state)
            state = self.mix_columns(state)
            state = self.add_round_key(state, self.round_keys[round * 4: (round + 1) * 4])

        state = self.sub_bytes(state)
        state = self.shift_rows(state)
        state = self.add_round_key(state, self.round_keys[40:])

        return state.flatten().tobytes()

    def encrypt(self, plaintext, key):
        # Дополнение сообщения до кратности 16 байт
        plaintext = MyPadding.pad(plaintext.encode(), 16)

        # Генерация раундовых ключей
        self.round_keys = self.key_expansion(key)

        # Шифрование блоками по 16 байт
        ciphertext_blocks = [self.encrypt_block(plaintext[i:i+16], key) for i in range(0, len(plaintext), 16)]

        return b''.join(ciphertext_blocks)

    def sub_bytes(self, state):
        # Замена байтов
        return np.array([self.s_box[b] for b in state.flatten()], dtype=np.uint8).reshape((4, 4))

    def shift_rows(self, state):
        # Сдвиг строк
        for i in range(1, 4):
            state[i] = np.roll(state[i], -i)
        return state

    def mix_columns(self, state):
        # Умножение в поле Галуа
        for i in range(4):
            s0 = self.gmul(state[0][i], 2) ^ self.gmul(state[1][i], 3) ^ state[2][i] ^ state[3][i]
            s1 = state[0][i] ^ self.gmul(state[1][i], 2) ^ self.gmul(state[2][i], 3) ^ state[3][i]
            s2 = state[0][i] ^ state[1][i] ^ self.gmul(state[2][i], 2) ^ self.gmul(state[3][i], 3)
            s3 = self.gmul(state[0][i], 3) ^ state[1][i] ^ state[2][i] ^ self.gmul(state[3][i], 2)
            state[0][i], state[1][i], state[2][i], state[3][i] = s0, s1, s2, s3
        return state

    def add_round_key(self, state, round_key):
        # XOR с раундовым ключом
        return np.bitwise_xor(state, round_key)

    def gmul(self, a, b):
        # Умножение в поле Галуа
        p = 0
        for _ in range(8):
            if b % 2 == 1:
                p ^= a
            hi_bit_set = (a & 0x80) != 0
            a <<= 1
            if hi_bit_set:
                a ^= 0x1b
            b >>= 1
        return p % 256

    def decrypt_block(self, block, key):
        state = np.frombuffer(block, dtype=np.uint8).reshape((4, 4))

        state = self.add_round_key(state, self.round_keys[40:])
        state = self.inv_shift_rows(state)
        state = self.inv_sub_bytes(state)

        for round in range(9, 0, -1):
            state = self.add_round_key(state, self.round_keys[round * 4: (round + 1) * 4])
            state = self.inv_mix_columns(state)
            state = self.inv_shift_rows(state)
            state = self.inv_sub_bytes(state)

        state = self.add_round_key(state, self.round_keys[:4])

        return state.flatten().tobytes()

    def decrypt(self, ciphertext, key):
        self.round_keys = self.key_expansion(key)

        ciphertext_blocks = [self.decrypt_block(ciphertext[i:i+16], key) for i in range(0, len(ciphertext), 16)]

        # Объединяем блоки и удаляем дополнение
        plaintext = MyPadding.unpad(b''.join(ciphertext_blocks)).decode()

        return plaintext

    s_box = [
        0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
        0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
        0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
        0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
        0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
        0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
        0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
        0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
        0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
        0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
        0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
        0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
        0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
        0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
        0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
        0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
    ]

    # Раундовая константа для расширения ключа
    rcon = [
        0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A,
        0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39
    ]

    def inv_shift_rows(self, state):
        # Инверсный сдвиг строк
        for i in range(1, 4):
            state[i] = np.roll(state[i], i)
        return state

    def inv_sub_bytes(self, state):
        # Инверсная замена байтов
        return np.array([self.inv_s_box[b] for b in state.flatten()], dtype=np.uint8).reshape((4, 4))

    inv_s_box = [
        0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
        0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
        0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
        0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
        0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
        0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
        0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
        0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
        0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
        0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
        0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
        0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
        0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
        0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
        0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
    ]

    def inv_mix_columns(self, state):
        for i in range(4):
            s0 = self.gmul(state[0][i], 0x0e) ^ self.gmul(state[1][i], 0x0b) ^ self.gmul(state[2][i], 0x0d) ^ self.gmul(
                state[3][i], 0x09)
            s1 = self.gmul(state[0][i], 0x09) ^ self.gmul(state[1][i], 0x0e) ^ self.gmul(state[2][i], 0x0b) ^ self.gmul(
                state[3][i], 0x0d)
            s2 = self.gmul(state[0][i], 0x0d) ^ self.gmul(state[1][i], 0x09) ^ self.gmul(state[2][i], 0x0e) ^ self.gmul(
                state[3][i], 0x0b)
            s3 = self.gmul(state[0][i], 0x0b) ^ self.gmul(state[1][i], 0x0d) ^ self.gmul(state[2][i], 0x09) ^ self.gmul(
                state[3][i], 0x0e)
            state[0][i], state[1][i], state[2][i], state[3][i] = s0, s1, s2, s3
        return state


    def generate_random_key(self,length=16,):
        characters = string.ascii_letters + string.digits
        key = ''.join(random.choice(characters) for _ in range(length))
        return key

